install.packages("remotes")
remotes::install_github(sprintf("rstudio/%s", c("reticulate", "tensorflow", "keras")))
reticulate::miniconda_uninstall() # start with a blank slate
reticulate::install_miniconda()
keras::install_keras()
library(keras); use_condaenv("tf"); library(reticulate); install_keras(method = c("conda"), conda = "auto", version = "default", tensorflow = "gpu")
library(keras); library(reticulate); install_keras(method = c("conda"), conda = "auto", version = "default", tensorflow = "gpu")
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
summary(as.factor(x_train))
summary(as.factor(y_train))
summary(as.factor(y_train))
par(mfrow=c(3,3))
library(grDevices)
for (k in 1:9) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(3,3))
library(grDevices)
for (k in 1:9) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(1,1))
images_train[1,]
par(mfrow=c(3,3))
library(grDevices)
for (k in 1:9) plot(as.raster(x_train[i,,] , max=255))
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
summary(as.factor(y_train))
par(mfrow=c(3,3))
library(grDevices)
for (k in 1:9) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(3,3))
library(grDevices)
for (i in 1:9) plot(as.raster(x_train[i,,] , max=255))
images_train[1,,]
par(mfrow=c(1,1))
images_train[1,,]
x_train[1,,]
x_train[1,,]
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
summary(as.factor(y_train))
par(mfrow=c(3,3))
library(grDevices)
for (i in 1:9) plot(as.raster(x_train[i,,] , max=255))
for (i in 1:9) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(1,2))
x_train[1,,]
x_train[2,,]
par(mfrow=c(1,1))
plot(as.raster(x_train[2,,] , max=255))
cls_mnist=as.factor(spec_clus(x_train, sigma_opt_mnist, k_mnist)$Classe)
cls_mnist=as.factor(spec_clus(x_train, sigma_opt_mnist, k_mnist)$Classe)
class(x_train )
as.matrix(x_train )
cls_mnist=as.factor(spec_clus(as.matrix(x_train), sigma_opt_mnist, k_mnist)$Classe)
spec_clus(as.matrix(x_train), sigma_opt_mnist, k_mnist)$Classe
cls_mnist=as.factor(spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe)
summary(as.factor(cls_mnist))
table(labels_train, cls_mnist)
images_train=data[["train"]][["images"]][1:5000,] # data$train$images[1:1000,]
save(images_train, file="mnist_reduit")
load("mnist_reduit")
labels_train= data$train$labels[1:5000]
summary(as.factor(labels_train))# nb d'enregistrements pour chaque chiffre
save(labels_train, file="labels_reduit")
load("labels_reduit")
str(images_train)
str(labels_train)
##Trouver le meilleur sigma
#Pr les données mnist:
k_mnist=length(unique(labels_train))
sigma =seq(4,13)#spec_clus fct uniquement pour ces valeurs
#mm = matrix(NA, nrow = length(sigma), ncol = nrow(images_train))
inert=list()
for (j in 1:length(sigma) ){
inert[[j]]=spec_clus(images_train, sigma[j], k_mnist)$Inerties
}
images_train=data[["train"]][["images"]][1:1000,] # data$train$images[1:1000,]
save(images_train, file="mnist_reduit")
load("mnist_reduit")
labels_train= data$train$labels[1:1000]
summary(as.factor(labels_train))# nb d'enregistrements pour chaque chiffre
save(labels_train, file="labels_reduit")
load("labels_reduit")
str(images_train)
str(labels_train)
cls_mnist=as.factor(spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe)
summary(as.factor(cls_mnist))
table(labels_train, cls_mnist)
head(images_train[,1:20], 20)
head(images_train[,1:20], 20)
View(data)
load("mnist_reduit")
cls_mnist=as.factor(spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe)
cls_mnist
table(labels_train, cls_mnist)
summary(as.factor(labels_train))
par(mfrow=c(4,3))
ligne_k_im_t=vector("list", length=12)
ligne_k_im_t_renverse=vector("list", length=12)
for (k in 1:36) # 12_1ère images
ligne_k_im_t[[k]]=matrix(images_train[k,], nrow =28, ncol =28 )
ligne_k_im_t_renverse[[k]]=t(apply(ligne_k_im_t[[k]], 1, rev))# rev
ligne_k_im_t_renverse
ligne_k_im_t_renverse
ligne_k_im_t_renverse
class(labels_train)
summary(as.factor(labels_train))
labels_train
cls_mnist
summary(as.factor(cls_mnist))
table(labels_train, cls_mnist)
cls_mnist[cls_mnist==1] <-0
cls_mnist[cls_mnist==1]
cls_mnist==1
cls_mnist
summary(as.factor(cls_mnist))
cls_mnist=as.factor(spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe)
summary(as.factor(cls_mnist))
length(cls_mnist[cls_mnist==1])
cls_mnist[cls_mnist==1] <-0
cls_mnist[cls_mnist==1]
cls_mnist=as.factor(spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe)
cls_mnist[cls_mnist==1]
length(cls_mnist[cls_mnist==1])
cls_mnist=spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe
cls_mnist[cls_mnist==1]
library(tidyverse)
cls_mnist %>% select(cls_mnist==1)
cls_mnist %>% filter(cls_mnist==1)
cls_mnist[cls_mnist==1]
which(cls_mnist==1)
xxx=c(2,5,7); xxx; xxx[1]=3
xxx=c(2,5,7)
xxx
xxx[1]=3; xxx
cls_mnist[which(cls_mnist==1)]=0
summary(as.factor(cls_mnist))
table(labels_train, cls_mnist)
plot(image(m), col=cls_mnist)
plot(image(m), col=cls_mnist)
plot(images_train, col=cls_mnist)
plot(image(m), col=cls_mnist)
cl_km_mnist
cl_km_mnist=kmeans(images_train, centers=k_mnist, algorithm = c("MacQueen"))$cluster
cl_km_spi=kmeans(sp$x, centers=k_spi, algorithm = c("MacQueen"))$cluster
cl_km_mnist
cl_km_mnist[which(cl_km_mnist==1)]=0
summary(as.factor(cl_km_mnist))
table(labels_train, cls_mnist); table(labels_train, cl_km_mnist)
fit_mnist <-mclust::Mclust(images_train, G=1:k_mnist)
library(mclust)
fit_mnist <-mclust::Mclust(images_train, G=1:k_mnist)
fit_spi <-mclust::Mclust(sp$x, G=1:k_spi)
summary(fit_mnist)
summary(fit_spi)
summary(fit_mnist)$Clusteringtable
summary(fit_mnist)$classification
cl_EM_mnist[which(cl_EM_mnist==1)]=0
cl_EM_mnist=summary(fit_mnist)$classification
cl_EM_mnist[which(cl_EM_mnist==1)]=0
table(labels_train, cl_EM_mnist)
mean(labels_train!=cl_EM_mnist)
class(labels_train)
class(cl_EM_mnist)
class(as.numeric(cl_EM_mnist))
yy=as.numeric(cl_EM_mnist); class(yy)
yy=as.integer(cl_EM_mnist); class(yy)
yy
mean(labels_train!=as.integer(cl_EM_mnist))
mean(labels_train!=as.integer(cls_mnist))
mean(labels_train!=as.integer(cl_km_mnist))
table(labels_train, cls_mnist)
mean(labels_train!=as.integer(cls_mnist))
table(labels_train, cls_mnist); table(labels_train, cl_km_mnist)
mean(labels_train!=as.integer(cl_km_mnist))
mean(labels_train!=as.integer(cl_EM_mnist))
mean(labels_train!=as.integer(na.omit(cl_EM_mnist)))
na.omit(cl_EM_mnist)
as.integer(na.omit(cl_EM_mnist))
table(labels_train, cl_EM_mnist)
mean(na.omit(labels_train!=as.integer(cl_EM_mnist)))
summary(fit_spi)$classification
table(labels_train, cls_mnist)
mean(labels_train!=as.integer(cls_mnist))
table(labels_train, cls_mnist); table(labels_train, cl_km_mnist)
mean(labels_train!=as.integer(cl_km_mnist))
table(labels_train, cl_EM_mnist)
mean(na.omit(labels_train!=as.integer(cl_EM_mnist)))
summary(fit_spi)$classification
table(labels_train, cls_mnist)
mean(labels_train!=as.integer(cls_mnist))
cls_mnist=spec_clus(images_train, sigma_opt_mnist, k_mnist)$Classe
cls_mnist[which(cls_mnist==1)]=0
summary(as.factor(cls_mnist))
summary(as.factor(labels_train))
table(labels_train, cls_mnist)
mean(labels_train!=as.integer(cls_mnist))
table(labels_train, cls_mnist); table(labels_train, cl_km_mnist)
mean(labels_train!=as.integer(cl_km_mnist))
table(labels_train, cl_EM_mnist)
mean(na.omit(labels_train!=as.integer(cl_EM_mnist)))
##I- Implementation de l'algo  de spectral clustering et chargement des library de l'algo EM:
library(mlbench) ; library(dslabs); library(fdm2id); library(flexclust); library(data.table); library(mclust)
library(keras); library(grDevices)
par(mfrow=c(4,3))
for (i in 1:12) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(4,3))
for (i in 1:12) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(4,3))
for (i in 1:12) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(4,3))
for (i in 1:12) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(4,3))
for (i in 1:12) plot(as.raster(x_train[i,,] , max=255))
par(mfrow=c(4,3))
for (k in 1:12){# 12_1ère images
m=matrix(images_train[k,], nrow =28, ncol =28 )
m=t(apply(m, 1, rev))# rev transpose l'odre des éléments d'1 vect.: la dernière col. se retrouve en 1ere position ds la mat.
image(m)
}
par(mfrow=c(4,3))
ind=which(cls_mnist==8)
for (k in 1:12){# 12_1ère images
mm=matrix(images_train[ind[k],], nrow =28, ncol =28 )
mm=t(apply(m, 1, rev))# rev transpose l'odre des éléments d'1 vect.: la dernière col. se retrouve en 1ere position ds la mat.
image(mm)
}
par(mfrow=c(4,3))
ind=which(cls_mnist==8)
for (i in 1:length(ind)) plot(as.raster(x_train[ind[i],,] , max=255) )
ind=which(cls_mnist==8)
for (i in 1:length(ind)) plot(as.raster(x_train[ind[i],,] , max=255) )
summary(as.factor(cls_mnist))
ind=which(cls_mnist==8)
length(ind)
p=length(ind)
(p=length(ind))
ind=which(cls_mnist==8)
(p=length(ind))
par(mfrow=c(p,3))
for (i in 1:p) plot(as.raster(x_train[ind[i],,] , max=255) )
ind=which(cls_mnist==8)
(p=length(ind))
par(mfrow=c(p,3))
for (i in 1:p) plot(as.raster(x_train[ind[i],,] , max=255) )
ind=which(cls_mnist==8)
(p=length(ind))
par(mfrow=c(6,3))
for (i in 1:p) plot(as.raster(x_train[ind[i],,] , max=255) )
par(mfrow=c(6,3))
ind=which(cls_mnist==8)
for (k in 1:18){# 18 images correspondantes aux n° classé en cathégorie 8
mm=matrix(images_train[ind[k],], nrow =28, ncol =28 )
mm=t(apply(m, 1, rev))# rev transpose l'odre des éléments d'1 vect.: la dernière col. se retrouve en 1ere position ds la mat.
image(mm)
}
par(mfrow=c(6,3))
ind=which(cls_mnist==8)
for (k in 1:18){# 18 images correspondantes aux n° classé en cathégorie 8
mm=matrix(images_train[ind[k],], nrow =28, ncol =28 )
mm=t(apply(m, 1, rev))# rev transpose l'odre des éléments d'1 vect.: la dernière col. se retrouve en 1ere position ds la mat.
image(mm)
}
par(mfrow=c(4,4))
ind=which(cls_mnist==8)
for (k in 1:16){# 18 images correspondantes aux n° classé en cathégorie 8
mm=matrix(images_train[ind[k],], nrow =28, ncol =28 )
mm=t(apply(m, 1, rev))# rev transpose l'odre des éléments d'1 vect.: la dernière col. se retrouve en 1ere position ds la mat.
image(mm)
}
ind=which(cls_mnist==8)
(p=length(ind))
par(mfrow=c(4,4))
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
for (i in 17:18) plot(as.raster(x_train[ind[i],,] , max=255) )
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
par(mfrow=c(4,4))
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
par(mfrow=c(1,2))
for (i in 17:18) plot(as.raster(x_train[ind[i],,] , max=255) )
summary(as.factor(cls_mnist))
summary(as.factor(cls_EM_mnist))
cl_EM_mnist=summary(fit_mnist)$classification
cl_EM_mnist[which(cl_EM_mnist==1)]=0
summary(as.factor(cls_EM_mnist))
fit_mnist
fit_spi
cl_EM_mnist=summary(fit_mnist)$classification
cl_EM_mnist
summary(cls_EM_mnist)
summary(cl_EM_mnist)
is.na(cl_EM_mnist)
is.na(cl_EM_mnist)==TRUE
summary(cl_EM_mnist)
244  + 1 +138  +70 + 92 + 56+ 152 + 63 + 35 +149
mean(na.omit(labels_train!=as.integer(cl_EM_mnist)))
class(cl_EM_mnist)
summary(cl_EM_mnist)
##Visualisons par exemple les images associées à une classification dans la cathégorie de chiffre 9:
(ind=which(cl_EM_mnist==8))
(p=length(ind))
ind=which(cl_EM_mnist==9)
(p=length(ind))
par(mfrow=c(5,5))
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
17+16
34-16
2*16
ind=which(cl_EM_mnist==9)
(p=length(ind))
par(mfrow=c(4,4))
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
for (i in 17:32) plot(as.raster(x_train[ind[i],,] , max=255) )
ind=which(cl_EM_mnist==9)
(p=length(ind))
par(mfrow=c(4,4))
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
ind=which(cl_EM_mnist==9)
(p=length(ind))
par(mfrow=c(4,4))
for (i in 1:16) plot(as.raster(x_train[ind[i],,] , max=255) )
for (i in 17:32) plot(as.raster(x_train[ind[i],,] , max=255) )
par(mfrow=c(2,2))
for (i in 33:35) plot(as.raster(x_train[ind[i],,] , max=255) )
summary(as.factor(cl_km_mnist))
cl_km_mnist
cl_km_mnist[which(cl_km_mnist==1)]=0
summary(as.factor(cl_km_mnist))
28-16
28-15
ind=which(cl_EM_mnist==0)
(p=length(ind))
par(mfrow=c(3,5))
for (i in 1:15) plot(as.raster(x_train[ind[i],,] , max=255) )
##Visualisons par exemple les images associées à une classification dans la cathégorie de chiffre 0:
ind=which(cl_EM_mnist==0)
(p=length(ind))
cl_EM_mnist
summary(as.factor(cl_km_mnist))
##Visualisons par exemple les images associées à une classification dans la cathégorie de chiffre 0:
ind=which(cl_km_mnist==0)
summary(as.factor(cl_km_mnist))
(p=length(ind))
par(mfrow=c(3,5))
for (i in 1:15) plot(as.raster(x_train[ind[i],,] , max=255) )
for (i in 16:28) plot(as.raster(x_train[ind[i],,] , max=255) )
par(mfrow=c(3,5))
for (i in 1:15) plot(as.raster(x_train[ind[i],,] , max=255) )
for (i in 16:28) plot(as.raster(x_train[ind[i],,] , max=255) )
summary(as.factor(cl_km_mnist))
table(labels_train, cls_mnist)
mean(labels_train!=as.integer(cls_mnist))
table(labels_train, cls_mnist)
table(labels_train, cls_mnist)
mean(labels_train!=as.integer(cls_mnist))
summary(as.factor(cls_mnist))
cls_mnist[which(cls_mnist==0)]=1
summary(as.factor(cls_mnist))
summary(as.factor(labels_train))
table(labels_train, cls_mnist)
cl_EM_mnist[which(cl_EM_mnist==0)]=1
table(labels_train, cl_EM_mnist)
cl_km_mnist[which(cl_km_mnist==0)]=1
table(labels_train, cls_mnist); table(labels_train, cl_km_mnist)
cl_EM_mnist[which(cl_EM_mnist==1)]=0
table(labels_train, cl_EM_mnist)
cl_EM_mnist[which(cl_EM_mnist==0)]=1
table(labels_train, cl_EM_mnist)
table(labels_train, cls_mnist)
table(labels_train, cl_EM_mnist)
#cl_km_mnist[which(cl_km_mnist==0)]=1
table(labels_train, cl_km_mnist)
représentent le 3 d'effectif 3, le 0 d'effectif 1 et le 5 d'effectif 1.
représentent le 3 d'effectif 3, le 0 d'effectif 1 et le 5 d'effectif 1.
##sur les données spirales:
##Visualisons la sortie de spec_clust:
cls_spi=spec_clus(sp$x, 0.05, k_spi)$Classe #0.432
summary(as.factor(cls_spi))
table(sp$classes, as.factor(cls_spi))
plot(sp$x, col=as.factor(cls_spi))
##IV- Interprétations des plots
summary(cl_km_spi)
cl_km_spi=as.factor(kmeans(sp$x, centers=k_spi, algorithm = c("MacQueen"))$cluster)
summary(cl_km_spi)
##k-means sur les données spirales:
cl_km_spi=as.factor(kmeans(sp$x, centers=k_spi, algorithm = c("MacQueen"))$cluster)
plot(sp$x ,col=cl_km_spi$cluster, main="Classification des spirales par kmeans")
plot(sp$x ,col=cl_km_spi$cluster, main="Classification des spirales par kmeans")
summary(cl_km_spi)
table(sp$classes, cl_km_spi)
plot(sp$x ,col=cl_km_spi$cluster, main="Classification des spirales par kmeans")
plot(sp$x ,col=cl_km_spi, main="Classification des spirales par kmeans")
cl_EM_spi=summary(fit_spi)$classification
summary(cl_EM_spi)
plot(fit_spi , what = "classification", main="Classification des spirales par l EM")
plot(sp$x ,col=cl_km_spi, main="Classification des spirales par kmeans")
##mclust sur les données spirales:
#fit_spi <-mclust::Mclust(sp$x, G=1:k_spi)
cl_EM_spi=summary(fit_spi)$classification
summary(cl_EM_spi)
plot(fit_spi , what = "classification", main="Classification des spirales par l EM")
par(mfrow=c(1,2))
##k-means sur les données spirales:
#cl_km_spi=as.factor(kmeans(sp$x, centers=k_spi, algorithm = c("MacQueen"))$cluster)
summary(cl_km_spi)
table(sp$classes, cl_km_spi)
plot(sp$x ,col=cl_km_spi, main="Classification des spirales par kmeans")
##mclust sur les données spirales:
#fit_spi <-mclust::Mclust(sp$x, G=1:k_spi)
cl_EM_spi=summary(fit_spi)$classification
summary(cl_EM_spi)
plot(fit_spi , what = "classification", main="Classification des spirales par l EM")
plot(sp$x ,col=cl_km_spi, main="Classification des spirales par kmeans")
plot(sp$x ,col=cl_km_spi, main="Classification des spirales par kmeans")
plot(sp$x ,col=cl_km_spi, main="Classification des spirales par kmeans")
plot(fit_spi , what = "classification", main="Classification des spirales par l EM")
plot(fit_spi , what = "classification", main="Classification des spirales par l EM")
table(sp$classes, cl_EM_spi)
plot(sp$x, col=cls_spi, main="Classification des spirales par spectral clustering")
## code to prepare `BB_dataset` dataset goes here
library(tidyverse); library(readr); library(clock); library(lubridate)
#Datas importation from 'data-raw/archive' repository:
##quelques nettoyages de certaines valeurs:
epi1=read.csv("data-raw/archive/breaking_bad_episodes.csv", header = TRUE, sep = "," ,dec = ".")
setwd("~/NewOrdi/API_Recueil/APIname")
## code to prepare `BB_dataset` dataset goes here
library(tidyverse); library(readr); library(clock); library(lubridate)
#Datas importation from 'data-raw/archive' repository:
##quelques nettoyages de certaines valeurs:
epi1=read.csv("data-raw/archive/breaking_bad_episodes.csv", header = TRUE, sep = "," ,dec = ".")
epi1$original_air_date=as.Date(epi1[, 7], format = "%Y-%m-%d")
epi1
epi2=read.csv("data-raw/archive/episodes.csv", header = TRUE, sep = "," )
epi2
death=read.csv("data-raw/archive/deaths.csv", header = TRUE, sep = "," )
vote=read.csv("data-raw/archive/breaking_bad_imdb.csv", header = TRUE, sep = "," )
vote
char=read.csv("data-raw/archive/characters.csv", header = TRUE, sep = "," )
char[3,4] <-rbind("Book Keeper, Car Wash Manager, Taxi Dispatcher")
char[6,4] <-rbind("Radiology technician") ; char$status= ifelse(char$status=="Alive", 1, 0)#1=Alive
char$birthday =as.Date(char[, 3], format = "%m-%d-%Y")
char
epi1_cols= names(epi1)
epi1_cols[!(epi1_cols %in% names(epi2))] ; epi1_cols[epi1_cols %in% names(death)]; epi1_cols[epi1_cols %in% names(vote)]; epi1_cols[epi1_cols %in% names(char)]
death$responsible[5]="Hank Schrader"
death$responsible[15]="The Cousins"
death$responsible[16]="Marco Salamanca"
death$responsible[17]="Marco Salamanca"
death$responsible[18]="Hank Schrader"
death$responsible[19]="Mike Erhmantraut"
char$name[45]="Tomas Cantillo"
death$last_words[35]="Salud!"
death$last_words[33]="Tu?"
epi1$title[25]="Mas"; epi1$title[35]="Thirty Eight Snub" ; epi1$title[21]="No Mas"
epi2$title[25]="Mas"; epi2$title[35]="Thirty Eight Snub" ; epi2$title[21]="No Mas"
vote$title[25]="Mas"; vote$title[35]="Thirty Eight Snub" ; vote$title[21]="No Mas"
tesfin =epi1 %>% count(season, directed_by, wt = us_viewers)
usethis::use_data(epi1, overwrite = TRUE)
usethis::use_data(epi2, overwrite = TRUE)
usethis::use_data(death, overwrite = TRUE)
usethis::use_data(vote, overwrite = TRUE)
usethis::use_data(char, overwrite = TRUE)
dim(epi1)
#Duration of each season in weeks:
tmp=data.frame(cbind(rep(0, 5)),0 )
names(tmp)=c("season", "duration_season_in_weeks")
for (i in unique(epi1$season))
tmp[i,]=cbind( epi1 %>% filter(season==i) %>% group_by(season) %>% summarise(duration_season=  difftime(original_air_date[length(original_air_date)], original_air_date[1], units="weeks") )
)
tmp
# le nombre de personnages morts dans l’ensemble de la série:
(nb_deaths_total_serie=sum(death$number_of_deaths))
#nb de morts par saison:
(season.d=death %>% group_by(season) %>% summarise( nb_deaths_per_season=sum(number_of_deaths)) %>% arrange(nb_deaths_per_season))
#les epiosdes les + meutriers par saison:
(episodes.meurtrier.by.season=death %>% group_by(season, episode) %>% summarise(nb_deaths_per_epiANDseason = sum(number_of_deaths)) %>% arrange(desc(nb_deaths_per_epiANDseason)))
#les 5 plus grands meurtriers de la série:
death %>% group_by(responsible, season) %>% summarise(nb_deaths_per_responsible=sum(number_of_deaths)) %>% arrange(desc(nb_deaths_per_responsible))
death %>% group_by(responsible, season) %>% summarise(nb_deaths_per_responsible=sum(number_of_deaths)) %>% filter(season==1)
#nb de morts par saison et responsable:
(tabi=death %>% group_by(responsible, season) %>% summarise(nb_deaths_per_responsible=sum(number_of_deaths)) %>% arrange(desc(nb_deaths_per_responsible)))
#nb de morts par saison et certains meurtriers:
(deaths.by.resp.by.season= filter(tabi, responsible %in% c("Walter White", "Gustavo Fring", "The Cousins", "Juarez Cartel", "Mike Ehrmantraut", "Jesse Pinkman", "Hank Schrader", "Hector Salamanca", "Tuco Salamanca"))
)
#nb de vus aux usa/episodes:
epi1 %>% select(episode_num_in_season, season , us_viewers, written_by) %>% arrange(desc(us_viewers))
# /saison
tmp.vus=epi1 %>% group_by(season) %>% summarise(nb_us_viewers_per_season= sum(us_viewers)) %>% arrange(nb_us_viewers_per_season)
#nb vus moy. (aux us) par sem pour chaque saison:
merge(tmp, tmp.vus) %>% mutate(nb_vu_per_sem= nb_us_viewers_per_season/duration_season_in_weeks)
# / director:
epi1 %>% group_by(written_by, episode_num_in_season, season) %>% summarise(nb_us_view_per_writter= sum(us_viewers)) #%>% arrange(desc(nb_us_view_per_writter))
# /writter:
epi1 %>% group_by(directed_by, episode_num_in_season, season) %>% summarise(nb_us_view_per_dir=sum(us_viewers))
#nb d'episodes par ecrivaine(n):
epi1 %>% group_by(written_by, season) %>% summarise(nb_epi_per_writter_seas=n())
#nb d'episodes par directrice(r):
epi1 %>% group_by(directed_by, season) %>% summarise(nb_epi_per_direrctor_seas=n())
# nombre de morts cumulé et temps (sem.) passé depuis la 1ere episode ??:
(nb.cum.death = death %>% group_by(season) %>% mutate(nb_cum_death_seas=cumsum(number_of_deaths)))
# nb de morts cumulé par saison et temps passé depuis la 1ere saison episode 1:
jointure1=list(tmp, tmp.vus, season.d) %>% reduce(full_join, by='season') %>% mutate(nb_cum_death_season=cumsum(nb_deaths_per_season), t.cum.in.weeks.from.s1= cumsum(duration_season_in_weeks))
devtools::document()
golem::run_dev()
golem::run_dev()
devtools::check()
